name: Code Quality

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run ESLint
      run: pnpm run lint:ci
      
    - name: Check code formatting
      run: |
        # Check if there are any formatting issues
        if pnpm run lint 2>&1 | grep -q "error\|Error\|ERROR"; then
          echo "❌ Code formatting issues found. Run 'pnpm run lint:fix' to fix them."
          exit 1
        else
          echo "✅ Code formatting is correct."
        fi
        
    - name: Check for console.log statements
      run: |
        if grep -r "console\.log" src/ --exclude-dir=node_modules; then
          echo "⚠️  Warning: console.log statements found in source code."
          echo "Consider removing them before production deployment."
        else
          echo "✅ No console.log statements found."
        fi
        
    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules; then
          echo "ℹ️  TODO/FIXME comments found in source code."
          echo "Consider addressing them before merging."
        else
          echo "✅ No TODO/FIXME comments found."
        fi
        
    - name: Bundle size analysis
      run: |
        pnpm run build
        echo "📦 Build completed successfully"
        
        # Check build size
        BUILD_SIZE=$(du -sh build | cut -f1)
        echo "Build size: $BUILD_SIZE"
        
        # Check for large files
        find build -type f -size +1M -exec echo "Large file: {}" \;
        
    - name: Generate analysis report
      if: github.event_name == 'pull_request'
      run: |
        # Get build size
        BUILD_SIZE=$(du -sh build | cut -f1)
        
        # Check for large files
        LARGE_FILES=$(find build -type f -size +1M 2>/dev/null || echo "")
        
        # Create analysis report
        cat > analysis_report.md << EOF
        ## 📊 Code Quality Analysis
        
        **Build Size:** $BUILD_SIZE
        
        EOF
        
        if [ -n "$LARGE_FILES" ]; then
          echo "**⚠️ Large Files Detected:**" >> analysis_report.md
          echo '```' >> analysis_report.md
          echo "$LARGE_FILES" >> analysis_report.md
          echo '```' >> analysis_report.md
          echo "" >> analysis_report.md
        else
          echo "**✅ No large files detected**" >> analysis_report.md
          echo "" >> analysis_report.md
        fi
        
        cat >> analysis_report.md << EOF
        **Quality Checks:**
        - ✅ ESLint passed
        - ✅ Build successful
        - ✅ Code formatting correct
        
        *This analysis was generated automatically by the CI pipeline.*
        EOF
        
        # Display the report
        cat analysis_report.md
        
    - name: Comment PR with analysis
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          try {
            // Read the analysis report
            const report = fs.readFileSync('analysis_report.md', 'utf8');
            
            // Debug information
            console.log('Repository:', context.repo.owner, context.repo.repo);
            console.log('Issue number:', context.issue.number);
            console.log('Event name:', context.eventName);
            console.log('Report content:', report.substring(0, 200) + '...');
            
            // Try to create comment
            const result = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
            
            console.log('Comment created successfully:', result.data.html_url);
            
          } catch (error) {
            console.error('Error creating comment:', error);
            console.error('Error status:', error.status);
            console.error('Error message:', error.message);
            
            // Log the report content as fallback
            try {
              const report = fs.readFileSync('analysis_report.md', 'utf8');
              console.log('Analysis Report (fallback):');
              console.log(report);
            } catch (readError) {
              console.log('Could not read analysis report');
            }
            
            // Don't fail the workflow
            process.exit(0);
          }
