name: Code Quality

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run ESLint
      run: pnpm run lint
      
    - name: Check code formatting
      run: |
        # Check if there are any formatting issues
        if ! pnpm run lint --quiet; then
          echo "‚ùå Code formatting issues found. Run 'pnpm run lint:fix' to fix them."
          exit 1
        else
          echo "‚úÖ Code formatting is correct."
        fi
        
    - name: Check for console.log statements
      run: |
        if grep -r "console\.log" src/ --exclude-dir=node_modules; then
          echo "‚ö†Ô∏è  Warning: console.log statements found in source code."
          echo "Consider removing them before production deployment."
        else
          echo "‚úÖ No console.log statements found."
        fi
        
    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules; then
          echo "‚ÑπÔ∏è  TODO/FIXME comments found in source code."
          echo "Consider addressing them before merging."
        else
          echo "‚úÖ No TODO/FIXME comments found."
        fi
        
    - name: Bundle size analysis
      run: |
        pnpm run build
        echo "üì¶ Build completed successfully"
        
        # Check build size
        BUILD_SIZE=$(du -sh build | cut -f1)
        echo "Build size: $BUILD_SIZE"
        
        # Check for large files
        find build -type f -size +1M -exec echo "Large file: {}" \;
        
    - name: Comment PR with analysis
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get build size
          const buildSize = require('child_process').execSync('du -sh build | cut -f1', { encoding: 'utf8' }).trim();
          
          // Check for large files
          const largeFiles = require('child_process').execSync('find build -type f -size +1M', { encoding: 'utf8' });
          
          let body = `## üìä Code Quality Analysis\n\n`;
          body += `**Build Size:** ${buildSize}\n\n`;
          
          if (largeFiles.trim()) {
            body += `**‚ö†Ô∏è Large Files Detected:**\n\`\`\`\n${largeFiles}\`\`\`\n\n`;
          } else {
            body += `**‚úÖ No large files detected**\n\n`;
          }
          
          body += `**Quality Checks:**\n`;
          body += `- ‚úÖ ESLint passed\n`;
          body += `- ‚úÖ Build successful\n`;
          body += `- ‚úÖ Code formatting correct\n\n`;
          
          body += `*This analysis was generated automatically by the CI pipeline.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: body
          });
